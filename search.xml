<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue组件通讯方式详解]]></title>
    <url>%2F2019%2F10%2F10%2Fvue%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[组件式开发作为 Vue 框架的核心思想，在实际的项目开发中，开发者主要都是通过组件的形式进行开发。Vue 的每个组件实例都拥有独立函数作用域，实现组件与组件之间的数据通讯、共享状态，掌握各种组件的通讯方式，才能帮助我们在开发的过程中更加高效。下面将悉数展示所有 Vue 组件之间的通讯方式。 组件通讯方式 props 和 $emitprops 属性是最常用的父组件向子组件传值的属性，通过props属性传的值是所传属性的空间地址，当父组件该属性变换时，子组件也会自动变换。props 可以是数组或者对象，对象允许配置高级选项。 123456789101112// 简单语法props: ['size', 'myMessage']// 对象语法props: &#123; property: &#123; type: Number, // 传参限定类型 default: any, // 指定默认值 required: Boolean, // 定义是否微必填项 validator: Function, // 自定义验证函数 &#125;&#125; $emit 属性是最常用的子组件向父组件传值的属性，其作用是触发当前实例上的事件，同时附加参数传给监听器回调。 123456789101112131415161718192021222324252627282930313233343536// 子组件Vue.component('magic-eight-ball', &#123; data: function () &#123; return &#123; possibleAdvice: ['Yes', 'No', 'Maybe'] &#125; &#125;, methods: &#123; giveAdvice: function () &#123; var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length) this.$emit('give-advice', this.possibleAdvice[randomAdviceIndex]) &#125; &#125;, template: ` &lt;button v-on:click="giveAdvice"&gt; Click me for advice &lt;/button&gt; `&#125;)// 父组件&lt;template&gt; &lt;div id="emit-example-argument"&gt; &lt;magic-eight-ball v-on:give-advice="showAdvice"&gt;&lt;magic-eight-ball&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; new Vue(&#123; el: '#emit-example-argument', methods: &#123; showAdvice: function (advice) &#123; alert(advice) &#125; &#125; &#125;)&lt;/script&gt; v-model众所周知，v-model 用于模板中输入框value值的数据双向绑定，但在组件中 v-model 则会等价于 1234&lt;custom-input v-bind:value="searchText" v-on:input="searchText = $event"&gt;&lt;/custom-input&gt; 为了让它正常工作，这个组件内的 &lt;input&gt; 必须： 将其 value 特性绑定到一个名叫 value 的 prop 上在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出 12345678910111213// 子组件Vue.component('custom-input', &#123; props: ['value'], template: ` &lt;input v-bind:value="value" v-on:input="$emit('input', $event.target.value)" &gt; `&#125;)父组件&lt;custom-input v-model="searchText"&gt;&lt;/custom-input&gt; refs通过给子组件添加 ref 属性，然后通过该属性访问子组件实例。 123456// 父组件&lt;home ref="home"/&gt;mounted()&#123; console.log(this.$refs.home) //即可拿到子组件的实例,就可以直接操作 data 和 methods&#125; .sync在 vue@1.x 的时候曾作为双向绑定功能存在，即子组件可以修改父组件中的值; 在 vue@2.0 的由于违背单项数据流的设计被干掉了; 在 vue@2.3.0+ 以上版本又重新引入了这个 .sync 修饰符。 12345678910// 父组件&lt;home :title.sync="title" /&gt;//编译时会被扩展为&lt;home :title="title" @update:title="val =&gt; title = val"/&gt;// 子组件// 所以子组件可以通过$emit 触发 update 方法改变mounted()&#123; this.$emit("update:title", '这是新的title')&#125; $attrs 和 $listeners$attrs 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。 $listeners 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586// 组件AVue.component('A', &#123; template: ` &lt;div&gt; &lt;p&gt;this is parent component!&lt;/p&gt; &lt;B :messagec="messagec" :message="message" v-on:getCData="getCData" v-on:getChildData="getChildData(message)"&gt;&lt;/B&gt; &lt;/div&gt; `, data() &#123; return &#123; message: 'hello', messagec: 'hello c' //传递给c组件的数据 &#125; &#125;, methods: &#123; // 执行B子组件触发的事件 getChildData(val) &#123; console.log(`这是来自B组件的数据：$&#123;val&#125;`); &#125;, // 执行C子组件触发的事件 getCData(val) &#123; console.log(`这是来自C组件的数据：$&#123;val&#125;`); &#125; &#125;&#125;);// 组件BVue.component('B', &#123; template: ` &lt;div&gt; &lt;input type="text" v-model="mymessage" @input="passData(mymessage)"&gt; &lt;!-- C组件中能直接触发 getCData 的原因在于：B组件调用 C组件时，使用 v-on 绑定了 $listeners 属性 --&gt; &lt;!-- 通过v-bind 绑定 $attrs 属性，C组件可以直接获取到 A组件中传递下来的 props（除了 B组件中 props声明的） --&gt; &lt;C v-bind="$attrs" v-on="$listeners"&gt;&lt;/C&gt; &lt;/div&gt; `, /** * 得到父组件传递过来的数据 * 这里的定义最好是写成数据校验的形式，免得得到的数据是我们意料之外的 * * props: &#123; * message: &#123; * type: String, * default: '' * &#125; * &#125; * */ props: ['message'], data()&#123; return &#123; mymessage: this.message &#125; &#125;, methods: &#123; passData(val)&#123; //触发父组件中的事件 this.$emit('getChildData', val) &#125; &#125;&#125;);// 组件CVue.component('C', &#123; template: ` &lt;div&gt; &lt;input type="text" v-model="$attrs.messagec" @input="passCData($attrs.messagec)"&gt; &lt;/div&gt; `, methods: &#123; passCData(val) &#123; // 触发父组件A中的事件 this.$emit('getCData',val) &#125; &#125;&#125;);var app=new Vue(&#123; el:'#app', template: ` &lt;div&gt; &lt;A /&gt; &lt;/div&gt; `&#125;); $parent 和 $children$parent 属性指向的父实例，通过 this.$parent.property 可以范围父实例的所有属性，但是会导致组件无法进行复用，不建议使用。 $children 属性指向当前实例的直接子组件数组，需要注意 $children 并不保证顺序，也不是响应式的。 提示：这两个属性不利于实现组件的复用，所以不建议使用。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// 定义 parent 组件Vue.component('parent', &#123; template: ` &lt;div&gt; &lt;p&gt;this is parent component!&lt;/p&gt; &lt;button @click="changeChildValue"&gt;test&lt;/button&gt; &lt;child /&gt; &lt;/div&gt; `, data() &#123; return &#123; message: 'hello' &#125; &#125;, methods: &#123; changeChildValue()&#123; this.$children[0].mymessage = 'hello'; &#125; &#125;,&#125;);// 定义 child 组件Vue.component('child', &#123; template:` &lt;div&gt; &lt;input type="text" v-model="mymessage" @change="changeValue" /&gt; &lt;/div&gt; `, data() &#123; return &#123; mymessage: this.$parent.message &#125; &#125;, methods: &#123; changeValue()&#123; this.$parent.message = this.mymessage;//通过如此调用可以改变父组件的值 &#125; &#125;,&#125;);const app = new Vue(&#123; el: '#app', template: ` &lt;div&gt; &lt;parent /&gt; &lt;/div&gt; `&#125;); 中央事件总线 EventBus当需要实现兄弟组件间通讯，并且项目规模不大的情况下，我们可以通过使用中央事件总线 EventBus 的方式实现。 EventBus 通过新建一个 Vue 事件 bus 对象，然后通过 bus.$emit 触发事件，bus.$on 监听触发的事件。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// 组件 AVue.component('A', &#123; template: ` &lt;div&gt; &lt;p&gt;this is A component!&lt;/p&gt; &lt;input type="text" v-model="mymessage" @input="passData(mymessage)"&gt; &lt;/div&gt; `, data() &#123; return &#123; mymessage: 'hello brother1' &#125; &#125;, methods: &#123; passData(val) &#123; //触发全局事件globalEvent this.$EventBus.$emit('globalEvent', val) &#125; &#125;&#125;);// 组件 BVue.component('B', &#123; template:` &lt;div&gt; &lt;p&gt;this is B component!&lt;/p&gt; &lt;p&gt;组件A 传递过来的数据：&#123;&#123;brothermessage&#125;&#125;&lt;/p&gt; &lt;/div&gt; `, data() &#123; return &#123; mymessage: 'hello brother2', brothermessage: '' &#125; &#125;, mounted() &#123; //绑定全局事件globalEvent this.$EventBus.$on('globalEvent', (val) =&gt; &#123; this.brothermessage = val; &#125;); &#125;&#125;);//定义中央事件总线const EventBus = new Vue();// 将中央事件总线赋值到 Vue.prototype 上，这样所有组件都能访问到了Vue.prototype.$EventBus = EventBus;const app = new Vue(&#123; el: '#app', template: ` &lt;div&gt; &lt;A /&gt; &lt;B /&gt; &lt;/div&gt; `&#125;); provide 和 inject这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。 provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。 inject 选项应该是一个数组或一个对象 提示：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。 12345678910111213141516// 父级组件提供 'foo'var Provider = &#123; provide: &#123; foo: 'bar' &#125;, // ...&#125;// 子组件注入 'foo'var Child = &#123; inject: ['foo'], created () &#123; console.log(this.foo) // =&gt; "bar" &#125; // ...&#125; $boradcast 和 $dispatch这也是一对成对出现的方法，不过只是在 Vue1.0 中提供了，而 Vue2.0 被废弃了，废话不多说，直接上代码。 1234567891011121314151617181920212223242526272829303132333435363738// broadcast 方法的主逻辑处理方法function broadcast(componentName, eventName, params) &#123; this.$children.forEach(child =&gt; &#123; const name = child.$options.componentName; if (name === componentName) &#123; child.$emit.apply(child, [eventName].concat(params)); &#125; else &#123; broadcast.apply(child, [componentName, eventName].concat(params)); &#125; &#125;);&#125;export default &#123; methods: &#123; // 定义 dispatch 方法 dispatch(componentName, eventName, params) &#123; let parent = this.$parent; let name = parent.$options.componentName; while (parent &amp;&amp; (!name || name !== componentName)) &#123; parent = parent.$parent; if (parent) &#123; name = parent.$options.componentName; &#125; &#125; if (parent) &#123; parent.$emit.apply(parent, [eventName].concat(params)); &#125; &#125;, // 定义 broadcast 方法 broadcast(componentName, eventName, params) &#123; broadcast.call(this, componentName, eventName, params); &#125; &#125;&#125;; 上面所示的代码，一般都作为一个 mixins 去混入使用, broadcast 是向特定的父组件触发事件，dispatch 是向特定的子组件触发事件，本质上这种方式还是 on 和 emit 的封装，在一些基础组件中都很实用。 Vuex 状态管理Vuex 是状态管理工具，实现了项目状态的集中式管理。工具的实现借鉴了 Flux、Redux、和 The Elm Architecture 的模式和概念。当然与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。详细的关于 Vuex 的介绍，请查看官网文档 vue-router 路由传参当需要实现跨路由地址的传参时，我们可以通过 vue-router 官方提供给我我们的传参方案实现组件通讯，详情请查看官方文档 Vue.observable2.6.0 新增用法:让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象;返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新;也可以作为最小化的跨组件状态存储器，用于简单的场景。通讯原理实质上是利用Vue.observable实现一个简易的 vuex 1234567891011121314151617181920212223242526272829303132333435// 文件路径 - /store/store.jsimport Vue from 'vue'export const store = Vue.observable(&#123; count: 0 &#125;)export const mutations = &#123; setCount (count) &#123; store.count = count &#125;&#125;//使用&lt;template&gt; &lt;div&gt; &lt;label for="bookNum"&gt;数 量&lt;/label&gt; &lt;button @click="setCount(count+1)"&gt;+&lt;/button&gt; &lt;span&gt;&#123;&#123;count&#125;&#125;&lt;/span&gt; &lt;button @click="setCount(count-1)"&gt;-&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; store, mutations &#125; from '../store/store' // Vue2.6新增API Observableexport default &#123; name: 'Add', computed: &#123; count () &#123; return store.count &#125; &#125;, methods: &#123; setCount: mutations.setCount &#125;&#125;&lt;/script&gt; 总结以上就是 Vue 组件通讯的详细方案说明，涵盖了从 Vue1.0 到 Vue2.6 几乎所有的通讯方案，其中 Vue.observable 将在 Vue3.0 被 reative API所替代，向查看更多更新请查看 Vue Composition API，同时我们还可以通过浏览器本地存储的方式进行组件通讯。]]></content>
      <categories>
        <category>Vue 框架</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript继承方法总结]]></title>
    <url>%2F2019%2F09%2F30%2Fjavascript%E7%BB%A7%E6%89%BF%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[继承是 OOP 语言中一个比较重要的概念，继承可以使得子类具有父类的属性和方法或者重新定义、新追加属性和方法等，由于 Javascript 语言没有真正的对象类，所以其实现继承的方法相对而言会比较特殊，实现继承主要是依靠原型链来实现的。实现继承的方法主要有以下几种： 1、原型链继承将一个原型对象的实例赋值给另一个原型对象的原型，从而继承该原型对象的属性和方法。 12345678910111213141516171819function SuperType() &#123; this.property = true;&#125;SuperType.prototype.getSuperValeu = function () &#123; return this.property;&#125;function SubType() &#123; this.subproperty = false;&#125;// 创建 SuperType 实例，并将该实例赋值给 SubType.prototypeSubType.prototype.getSubValvue = function () &#123; return this.subproperty;&#125;var instance = new SubType();console.log(instance.getSuperValue()); // true 【注意事项】 当子类需要覆盖父类的方法或者添加方法时，给原型添加的方法一定要放在替换原型的语句之后， 否则子类实例调用该函数时，该函数将会被父类的原型方法给覆盖掉。 通过原型链实现继承时，不能使用对象字面量创建原型方法，否则将会重写原型链，导致继承失败。 优点： 每一个子类实例都可以继承父类函数的属性和方法以及父类函数原型链上的属性和方法 缺点： 包含引用类型值的原型属性会被所有实例共享，多个实例对引用类型的操作会被篡改 12345678910111213141516function SuperType() &#123; this.colors = ['red', 'blue', 'green'];&#125;function SubType() &#123;&#125;// 继承 SuperTypeSubType.prototype = new SuperType();var instance1 = new SubType();instance1.colors.push('black');console.log(instance1.colors); // 'red, blue, green, black'var instance2 = new SubType();console.log(instance2.colors); // 'red, blue, green, black' 2、借用构造函数继承在子类构造函数中调用执行父类构造函数，并将this指针指向子类的构造函数的作用域,使得子类的每个实例都会复制一份父类函数中的属性。 123456789101112131415function SuperType() &#123; this.colors = ['red', 'blue' , 'green'];&#125;function SubType() &#123; // 执父类构造函数，继承父类 SuperType.call(this);&#125;var instance1 = new SubType();instance1.colors.push('blck');console.log(instance1.colors); // 'red, blue, green, black'var instance2 = new SubType();console.log(instance2.colors); // 'red, blue, green' 优点： 在子类的构造函数中可以向父类函数传递参数 123456789101112131415function SuperType(name) &#123; this.name = name;&#125;function SubType() &#123; // 继承 SuperType，同时传递参数 SuperType.call(this, 'Nicholas'); // 实例属性 this.age = 29;&#125;var instance = new SubType()console.log(instance.name); // 'Nicholas'console.log(instance.age); // 29 缺点： 只能继承父类的实例属性和方法，不能继承父类原型的属性和方法 每一个子类实例都有父类实例函数的副本，无法实现属性/方法复用 3、组合继承组合继承指的是组合原型链和借用构造函数技术的继承方法，使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。 123456789101112131415161718192021222324252627282930313233343536function SuperType(name) &#123; this.name = name; this.colors = ['red', 'blue', 'green'];&#125;SuperType.prototype.sayName = function () &#123; console.log(this.name);&#125;;function SubType(name, age) &#123; // 继承属性 // 第二次借用构造函数，调用 SuperType SuperType.call(this, name); this.age = age;&#125;// 继承方法// 第一次构造原型链，调用 SuperTypeSubType.prototype = new SuperType();// 重写 SubType.prototype 的 constructor 属性，指向自己的构造函数 SubTypeSubType.prototype.constructor = SubType;SubType.prototype.sayAge = function () &#123; console.log(this.age);&#125;;var instance1 = new SubType('Nicholas', 29);instance1.colors.push('black');console.log(instance1.colors); // 'red, blue, green, black'instance1.sayName(); // 'Nicholas'instance1.sayAge(); // 29var instance12 = new SubType('Greg', 27);console.log(instance2.colors); // 'red, blue, green'instance2.sayName(); // 'Greg'instance2.sayAge(); // 27 缺点： 子类的实例对象会分别两次调用 SuperType,在实例对象上拷贝了父类函数的属性，同时也在原型上创建了父类函数的属性，实例上的属性覆盖了原型对象上的同名属性。 4、原型式继承利用空对象作为中介，将某个对象直接复制给空对象搞糟函数的原型。 12345678910111213141516171819202122function object(obj) &#123; function F() &#123;&#125; F.prototype = obj; return new F();&#125;object()对传入的对象执行了一次*浅复制*，将构造函数的原型直接指向传入的对象。var person = &#123; name: 'Nicholas', friends: ['Shelby', 'Court', 'Van']&#125;;var anotherPerson = object(person);anotherPerson.name = 'Greg';anotherPerson.friends.push('Rob');var yetAnotherPerson = object(person);yetAnotherPerson.name = 'Linda';yetAnotherPerson.friends.push('Barbie');console.log(person.friends); // 'Shelby, Court, Van, Rob, Barbie' 另外，ES5 存在 Object.create() 的方法，能够代替上面的 object 方法。 5、寄生式继承在原型式继承的基础上，增强对象，返回构造函数 1234567funciton createAnother(original) &#123; var clone = object(orginal); // 通过调用 object() 函数创建一个新对象 clone.sayHi = function () &#123; // 以某种方式来增强对象 console.log('HI'); &#125; return clone; // 返回这个对象&#125; 通过函数的作用增强新对象，即给新对象添加属性和方法 1234567var person = &#123; name: 'Nicholas', friends: ['Shelby', 'Court', 'Van']&#125;;var anotherPerson = createAnother(person);anotherPerson.sayHi(); // 'HI' 缺点： 引用属性被多个实例共享，存在多个实例篡改属性的可能 与构造函数模式类似，不能做到函数复用而降低效率 6、寄生组合式继承结合借用构造函数传递参数和寄生模实现继承 1234567891011121314151617181920212223242526function inheritPrototype(subType, superType) &#123; var prototype = Object.create(superType.prototype); // 创建对象 prototype.constructor = subType; // 增强对象 subType.prototype = prototype; // 指定对象&#125;function SuperType(name) &#123; this.name = name; this.colors = ['red', 'blue', 'green'];&#125;SuperType.prototype.sayName = function () &#123; console.log(this.name);&#125;;function SubType(name, age) &#123; SuperType.call(this, name); this.age = age;&#125;inheritPrototype(SubType, SuperType);SubType.prototype.sayAge = function () &#123; console.log(this.age);&#125;; 优点： 避免在实例的原型上创建不必要的、多余的属性，同时保持原型链不变 寄生组合式继承式引用类型最理想的继承范式。 7、圣杯模式继承圣杯模式：其原理依然遵循的是寄生组合式 1234567891011121314151617181920212223242526// 圣杯模式function inherit(subType, superType) &#123; function F() &#123;&#125;; F.prototype = superType.prototype; subType.prototype = new F(); subType.prototype.constructor = superType; subType.prototype.uber = superType.prototype;&#125;// 高级圣杯// 通过闭包函数实现属性私有化的作用var inherit = (function () &#123; var F = function () &#123;&#125;; return function (subType, superType) &#123; // 定义私有属性 //var prop F.prototype = superType.prototype; subType.prototype = new F(); subType.prototype.constructor = superType; subType.prototype.uber = superType.prototype; // 获取私有属性 subType.prototype.getProp = function () &#123; // get prop &#125; &#125;&#125;) 8、混入方式继承多个对象通过 Object.assign 把其他原型构造函数拷贝到实例子类原型上。 123456789101112131415function MyClass() &#123; SuperClass.call(this); OtherSuperClass.call(this);&#125;// 继承 SuperClassMyClass.prototype = Object.create(SuperClass.prototype);// 混合其他类Object.assign(MyClass.prototype, OtherSuperClass.prototype);// 重新指定 constructorMyClass.prototype.constructor = MyClass;MyClass.prototype.myMethod = function () &#123; // do something&#125; 9、ES6 类继承 extendsextends关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中constructor表示构造函数，一个类中只能有一个构造函数，有多个会报出SyntaxError错误,如果没有显式指定构造方法，则会添加默认的 constructor方法 12345678910111213141516171819202122232425262728293031323334353637383940class Rectangle &#123; // constructor constructor(height, width) &#123; this.height = height; this.width = width; &#125; // Getter get area() &#123; return this.calcArea() &#125; // Method calcArea() &#123; return this.height * this.width; &#125;&#125;const rectangle = new Rectangle(10, 20);console.log(rectangle.area);// 输出 200-----------------------------------------------------------------// 继承class Square extends Rectangle &#123; constructor(length) &#123; super(length, length); // 如果子类中存在构造函数，则需要在使用“this”之前首先调用 super()。 this.name = 'Square'; &#125; get area() &#123; return this.height * this.width; &#125;&#125;const square = new Square(10);console.log(square.area);// 输出 100 extends 继承的核心代码如下，其实现和上述的寄生组合式继承方式一样 1234567891011121314151617181920function _inherits(subType, superType) &#123; // 创建对象，创建父类原型的一个副本 // 增强对象，弥补因重写原型而失去的默认的constructor 属性 // 指定对象，将新创建的对象赋值给子类的原型 subType.prototype = Object.create(superType &amp;&amp; superType.prototype, &#123; constructor: &#123; value: subType, enumerable: false, writable: true, configurable: true &#125; &#125;); if (superType) &#123; Object.setPrototypeOf ? Object.setPrototypeOf(subType, superType) : subType.__proto__ = superType; &#125;&#125; ES5继承和ES6继承的区别 ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.call(this)）. ES6的继承有所不同，实质上是先创建父类的实例对象this，然后再用子类的构造函数修改this。因为子类没有自己的this对象，所以必须先调用父类的super()方法，否则新建实例报错。 JavaScript常用八种继承方案 NicholasC.Zakas. JavaScript高级程序设计. JAVASCRIPT高级程序设计. 2012.]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
