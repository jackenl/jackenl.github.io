<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凌风的博客</title>
  
  <subtitle>LinFun&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-10T07:14:28.716Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凌风</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue组件通讯方式详解</title>
    <link href="http://yoursite.com/2019/10/10/vue%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/10/10/vue组件间的通讯方式/</id>
    <published>2019-10-10T02:12:36.096Z</published>
    <updated>2019-10-10T07:14:28.716Z</updated>
    
    <content type="html"><![CDATA[<p>组件式开发作为 Vue 框架的核心思想，在实际的项目开发中，开发者主要都是通过组件的形式进行开发。Vue 的每个组件实例都拥有独立函数作用域，实现组件与组件之间的数据通讯、共享状态，掌握各种组件的通讯方式，才能帮助我们在开发的过程中更加高效。下面将悉数展示所有 Vue 组件之间的通讯方式。</p><a id="more"></a><h2 id="组件通讯方式"><a href="#组件通讯方式" class="headerlink" title="组件通讯方式"></a>组件通讯方式</h2><hr><h3 id="props-和-emit"><a href="#props-和-emit" class="headerlink" title="props 和 $emit"></a>props 和 $emit</h3><p>props 属性是最常用的父组件向子组件传值的属性，通过props属性传的值是所传属性的空间地址，当父组件该属性变换时，子组件也会自动变换。props 可以是数组或者对象，对象允许配置高级选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 简单语法</span><br><span class="line">props: [<span class="string">'size'</span>, <span class="string">'myMessage'</span>]</span><br><span class="line"></span><br><span class="line">// 对象语法</span><br><span class="line">props: &#123;</span><br><span class="line">  property: &#123;</span><br><span class="line">    <span class="built_in">type</span>: Number, // 传参限定类型</span><br><span class="line">    default: any, // 指定默认值</span><br><span class="line">    required: Boolean, // 定义是否微必填项</span><br><span class="line">    validator: Function, // 自定义验证函数</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$emit 属性是最常用的子组件向父组件传值的属性，其作用是触发当前实例上的事件，同时附加参数传给监听器回调。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">Vue.component(<span class="string">'magic-eight-ball'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      possibleAdvice: [<span class="string">'Yes'</span>, <span class="string">'No'</span>, <span class="string">'Maybe'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    giveAdvice: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      var randomAdviceIndex = Math.floor(Math.random() * this.possibleAdvice.length)</span><br><span class="line">      this.<span class="variable">$emit</span>(<span class="string">'give-advice'</span>, this.possibleAdvice[randomAdviceIndex])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;button v-on:click=<span class="string">"giveAdvice"</span>&gt;</span><br><span class="line">      Click me <span class="keyword">for</span> advice</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"emit-example-argument"</span>&gt;</span><br><span class="line">    &lt;magic-eight-ball v-on:give-advice=<span class="string">"showAdvice"</span>&gt;&lt;magic-eight-ball&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: <span class="string">'#emit-example-argument'</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      showAdvice: <span class="keyword">function</span> (advice) &#123;</span><br><span class="line">        alert(advice)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>众所周知，v-model 用于模板中输入框value值的数据双向绑定，但在组件中 v-model 则会等价于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-input</span><br><span class="line">  v-bind:value=<span class="string">"searchText"</span></span><br><span class="line">  v-on:input=<span class="string">"searchText = <span class="variable">$event</span>"</span></span><br><span class="line">&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure><p>为了让它正常工作，这个组件内的 &lt;input&gt; 必须：</p><p>将其 value 特性绑定到一个名叫 value 的 prop 上<br>在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">Vue.component(<span class="string">'custom-input'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'value'</span>],</span><br><span class="line">  template: `</span><br><span class="line">    &lt;input</span><br><span class="line">      v-bind:value=<span class="string">"value"</span></span><br><span class="line">      v-on:input=<span class="string">"<span class="variable">$emit</span>('input', <span class="variable">$event</span>.target.value)"</span></span><br><span class="line">    &gt;</span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">父组件</span><br><span class="line">&lt;custom-input v-model=<span class="string">"searchText"</span>&gt;&lt;/custom-input&gt;</span><br></pre></td></tr></table></figure><h3 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h3><p>通过给子组件添加 ref 属性，然后通过该属性访问子组件实例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home ref=<span class="string">"home"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mounted</span></span>()&#123;</span><br><span class="line">  console.log(this.<span class="variable">$refs</span>.home) //即可拿到子组件的实例,就可以直接操作 data 和 methods</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sync"><a href="#sync" class="headerlink" title=".sync"></a>.sync</h3><p>在 <a href="mailto:vue@1.x" target="_blank" rel="noopener">vue@1.x</a> 的时候曾作为双向绑定功能存在，即子组件可以修改父组件中的值; 在 <a href="mailto:vue@2.0" target="_blank" rel="noopener">vue@2.0</a> 的由于违背单项数据流的设计被干掉了; 在 <a href="mailto:vue@2.3.0" target="_blank" rel="noopener">vue@2.3.0</a>+ 以上版本又重新引入了这个 .sync 修饰符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home :title.sync=<span class="string">"title"</span> /&gt;</span><br><span class="line">//编译时会被扩展为</span><br><span class="line">&lt;home :title=<span class="string">"title"</span>  @update:title=<span class="string">"val =&gt; title = val"</span>/&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">// 所以子组件可以通过<span class="variable">$emit</span> 触发 update 方法改变</span><br><span class="line"><span class="function"><span class="title">mounted</span></span>()&#123;</span><br><span class="line">  this.<span class="variable">$emit</span>(<span class="string">"update:title"</span>, <span class="string">'这是新的title'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="attrs-和-listeners"><a href="#attrs-和-listeners" class="headerlink" title="$attrs 和 $listeners"></a>$attrs 和 $listeners</h3><p>$attrs 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。</p><p>$listeners 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">// 组件A</span><br><span class="line">Vue.component(<span class="string">'A'</span>, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;this is parent component!&lt;/p&gt;</span><br><span class="line">      &lt;B :messagec=<span class="string">"messagec"</span> :message=<span class="string">"message"</span> v-on:getCData=<span class="string">"getCData"</span> v-on:getChildData=<span class="string">"getChildData(message)"</span>&gt;&lt;/B&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      message: <span class="string">'hello'</span>,</span><br><span class="line">      messagec: <span class="string">'hello c'</span> //传递给c组件的数据</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 执行B子组件触发的事件</span><br><span class="line">    getChildData(val) &#123;</span><br><span class="line">      console.log(`这是来自B组件的数据：<span class="variable">$&#123;val&#125;</span>`);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 执行C子组件触发的事件</span><br><span class="line">    getCData(val) &#123;</span><br><span class="line">      console.log(`这是来自C组件的数据：<span class="variable">$&#123;val&#125;</span>`);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 组件B</span><br><span class="line">Vue.component(<span class="string">'B'</span>, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"mymessage"</span> @input=<span class="string">"passData(mymessage)"</span>&gt;</span><br><span class="line">      &lt;!-- C组件中能直接触发 getCData 的原因在于：B组件调用 C组件时，使用 v-on 绑定了 <span class="variable">$listeners</span> 属性 --&gt;</span><br><span class="line">      &lt;!-- 通过v-bind 绑定 <span class="variable">$attrs</span> 属性，C组件可以直接获取到 A组件中传递下来的 props（除了 B组件中 props声明的） --&gt;</span><br><span class="line">      &lt;C v-bind=<span class="string">"<span class="variable">$attrs</span>"</span> v-on=<span class="string">"<span class="variable">$listeners</span>"</span>&gt;&lt;/C&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  /**</span><br><span class="line">   * 得到父组件传递过来的数据</span><br><span class="line">   * 这里的定义最好是写成数据校验的形式，免得得到的数据是我们意料之外的</span><br><span class="line">   *</span><br><span class="line">   * props: &#123;</span><br><span class="line">   *   message: &#123;</span><br><span class="line">   *     <span class="built_in">type</span>: String,</span><br><span class="line">   *     default: <span class="string">''</span></span><br><span class="line">   *   &#125;</span><br><span class="line">   * &#125;</span><br><span class="line">   *</span><br><span class="line">  */</span><br><span class="line">  props: [<span class="string">'message'</span>],</span><br><span class="line">  <span class="function"><span class="title">data</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      mymessage: this.message</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    passData(val)&#123;</span><br><span class="line">      //触发父组件中的事件</span><br><span class="line">      this.<span class="variable">$emit</span>(<span class="string">'getChildData'</span>, val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 组件C</span><br><span class="line">Vue.component(<span class="string">'C'</span>, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"<span class="variable">$attrs</span>.messagec"</span> @input=<span class="string">"passCData(<span class="variable">$attrs</span>.messagec)"</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    passCData(val) &#123;</span><br><span class="line">      // 触发父组件A中的事件</span><br><span class="line">      this.<span class="variable">$emit</span>(<span class="string">'getCData'</span>,val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var app=new Vue(&#123;</span><br><span class="line">  el:<span class="string">'#app'</span>,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;A /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="parent-和-children"><a href="#parent-和-children" class="headerlink" title="$parent 和 $children"></a>$parent 和 $children</h3><p>$parent 属性指向的父实例，通过 this.$parent.property 可以范围父实例的所有属性，但是会导致组件无法进行复用，不建议使用。</p><p>$children 属性指向当前实例的直接子组件数组，需要注意 $children 并不保证顺序，也不是响应式的。</p><blockquote><p>提示：这两个属性不利于实现组件的复用，所以不建议使用。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 定义 parent 组件</span><br><span class="line">Vue.component(<span class="string">'parent'</span>, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;this is parent component!&lt;/p&gt;</span><br><span class="line">      &lt;button @click=<span class="string">"changeChildValue"</span>&gt;<span class="built_in">test</span>&lt;/button&gt;</span><br><span class="line">      &lt;child /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      message: <span class="string">'hello'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeChildValue</span></span>()&#123;</span><br><span class="line">      this.<span class="variable">$children</span>[0].mymessage = <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 定义 child 组件</span><br><span class="line">Vue.component(<span class="string">'child'</span>, &#123;</span><br><span class="line">  template:`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"mymessage"</span> @change=<span class="string">"changeValue"</span> /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      mymessage: this.<span class="variable">$parent</span>.message</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">changeValue</span></span>()&#123;</span><br><span class="line">      this.<span class="variable">$parent</span>.message = this.mymessage;//通过如此调用可以改变父组件的值</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;parent /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="中央事件总线-EventBus"><a href="#中央事件总线-EventBus" class="headerlink" title="中央事件总线 EventBus"></a>中央事件总线 EventBus</h3><p>当需要实现兄弟组件间通讯，并且项目规模不大的情况下，我们可以通过使用中央事件总线 EventBus 的方式实现。</p><p>EventBus 通过新建一个 Vue 事件 bus 对象，然后通过 bus.$emit 触发事件，bus.$on 监听触发的事件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 组件 A</span><br><span class="line">Vue.component(<span class="string">'A'</span>, &#123;</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;this is A component!&lt;/p&gt;</span><br><span class="line">      &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"mymessage"</span> @input=<span class="string">"passData(mymessage)"</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      mymessage: <span class="string">'hello brother1'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    passData(val) &#123;</span><br><span class="line">      //触发全局事件globalEvent</span><br><span class="line">      this.<span class="variable">$EventBus</span>.<span class="variable">$emit</span>(<span class="string">'globalEvent'</span>, val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 组件 B</span><br><span class="line">Vue.component(<span class="string">'B'</span>, &#123;</span><br><span class="line">  template:`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;this is B component!&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;组件A 传递过来的数据：&#123;&#123;brothermessage&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      mymessage: <span class="string">'hello brother2'</span>,</span><br><span class="line">      brothermessage: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">mounted</span></span>() &#123;</span><br><span class="line">    //绑定全局事件globalEvent</span><br><span class="line">    this.<span class="variable">$EventBus</span>.<span class="variable">$on</span>(<span class="string">'globalEvent'</span>, (val) =&gt; &#123;</span><br><span class="line">      this.brothermessage = val;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//定义中央事件总线</span><br><span class="line">const EventBus = new Vue();</span><br><span class="line"></span><br><span class="line">// 将中央事件总线赋值到 Vue.prototype 上，这样所有组件都能访问到了</span><br><span class="line">Vue.prototype.<span class="variable">$EventBus</span> = EventBus;</span><br><span class="line"></span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  template: `</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;A /&gt;</span><br><span class="line">      &lt;B /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="provide-和-inject"><a href="#provide-和-inject" class="headerlink" title="provide 和 inject"></a>provide 和 inject</h3><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p><p>provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。</p><p>inject 选项应该是一个数组或一个对象</p><blockquote><p>提示：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 父级组件提供 <span class="string">'foo'</span></span><br><span class="line">var Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子组件注入 <span class="string">'foo'</span></span><br><span class="line">var Child = &#123;</span><br><span class="line">  inject: [<span class="string">'foo'</span>],</span><br><span class="line">  <span class="function"><span class="title">created</span></span> () &#123;</span><br><span class="line">    console.log(this.foo) // =&gt; <span class="string">"bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="boradcast-和-dispatch"><a href="#boradcast-和-dispatch" class="headerlink" title="$boradcast 和 $dispatch"></a>$boradcast 和 $dispatch</h3><p>这也是一对成对出现的方法，不过只是在 Vue1.0 中提供了，而 Vue2.0 被废弃了，废话不多说，直接上代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// broadcast 方法的主逻辑处理方法</span><br><span class="line"><span class="keyword">function</span> broadcast(componentName, eventName, params) &#123;</span><br><span class="line">  this.<span class="variable">$children</span>.forEach(child =&gt; &#123;</span><br><span class="line">    const name = child.<span class="variable">$options</span>.componentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name === componentName) &#123;</span><br><span class="line">      child.<span class="variable">$emit</span>.apply(child, [eventName].concat(params));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      broadcast.apply(child, [componentName, eventName].concat(params));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 定义 dispatch 方法</span><br><span class="line">    dispatch(componentName, eventName, params) &#123;</span><br><span class="line">      <span class="built_in">let</span> parent = this.<span class="variable">$parent</span>;</span><br><span class="line">      <span class="built_in">let</span> name = parent.<span class="variable">$options</span>.componentName;</span><br><span class="line">      <span class="keyword">while</span> (parent &amp;&amp; (!name || name !== componentName)) &#123;</span><br><span class="line">        parent = parent.<span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">          name = parent.<span class="variable">$options</span>.componentName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">        parent.<span class="variable">$emit</span>.apply(parent, [eventName].concat(params));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 定义 broadcast 方法</span><br><span class="line">    broadcast(componentName, eventName, params) &#123;</span><br><span class="line">      broadcast.call(this, componentName, eventName, params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面所示的代码，一般都作为一个 mixins 去混入使用, broadcast 是向特定的父组件触发事件，dispatch 是向特定的子组件触发事件，本质上这种方式还是 on 和 emit 的封装，在一些基础组件中都很实用。</p><h3 id="Vuex-状态管理"><a href="#Vuex-状态管理" class="headerlink" title="Vuex 状态管理"></a>Vuex 状态管理</h3><p>Vuex 是状态管理工具，实现了项目状态的集中式管理。工具的实现借鉴了 Flux、Redux、和 The Elm Architecture 的模式和概念。当然与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。详细的关于 Vuex 的介绍，请查看<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">官网文档</a></p><h3 id="vue-router-路由传参"><a href="#vue-router-路由传参" class="headerlink" title="vue-router 路由传参"></a>vue-router 路由传参</h3><p>当需要实现跨路由地址的传参时，我们可以通过 vue-router 官方提供给我我们的传参方案实现组件通讯，详情请查看<a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html#%E5%B8%83%E5%B0%94%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">官方文档</a></p><h3 id="Vue-observable"><a href="#Vue-observable" class="headerlink" title="Vue.observable"></a>Vue.observable</h3><p>2.6.0 新增<br>用法:让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象;<br>返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新;<br>也可以作为最小化的跨组件状态存储器，用于简单的场景。<br>通讯原理实质上是利用Vue.observable实现一个简易的 vuex</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 文件路径 - /store/store.js</span><br><span class="line">import Vue from <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> const store = Vue.observable(&#123; count: 0 &#125;)</span><br><span class="line"><span class="built_in">export</span> const mutations = &#123;</span><br><span class="line">  setCount (count) &#123;</span><br><span class="line">    store.count = count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"bookNum"</span>&gt;数 量&lt;/label&gt;</span><br><span class="line">            &lt;button @click=<span class="string">"setCount(count+1)"</span>&gt;+&lt;/button&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;count&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;button @click=<span class="string">"setCount(count-1)"</span>&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; store, mutations &#125; from <span class="string">'../store/store'</span> // Vue2.6新增API Observable</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">'Add'</span>,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">count</span></span> () &#123;</span><br><span class="line">      <span class="built_in">return</span> store.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setCount: mutations.setCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是 Vue 组件通讯的详细方案说明，涵盖了从 Vue1.0 到 Vue2.6 几乎所有的通讯方案，其中 Vue.observable 将在 Vue3.0 被 reative API所替代，向查看更多更新请查看 <a href="https://vue-composition-api-rfc.netlify.com/" target="_blank" rel="noopener">Vue Composition API</a>，同时我们还可以通过浏览器本地存储的方式进行组件通讯。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件式开发作为 Vue 框架的核心思想，在实际的项目开发中，开发者主要都是通过组件的形式进行开发。Vue 的每个组件实例都拥有独立函数作用域，实现组件与组件之间的数据通讯、共享状态，掌握各种组件的通讯方式，才能帮助我们在开发的过程中更加高效。下面将悉数展示所有 Vue 组件之间的通讯方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue 框架" scheme="http://yoursite.com/categories/Vue-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>javascript继承方法总结</title>
    <link href="http://yoursite.com/2019/09/30/javascript%E7%BB%A7%E6%89%BF%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/09/30/javascript继承方法总结/</id>
    <published>2019-09-30T08:21:21.000Z</published>
    <updated>2019-09-30T08:48:45.272Z</updated>
    
    <content type="html"><![CDATA[<p>继承是 OOP 语言中一个比较重要的概念，继承可以使得子类具有父类的属性和方法或者重新定义、新追加属性和方法等，由于 Javascript 语言没有真正的对象类，所以其实现继承的方法相对而言会比较特殊，实现继承主要是依靠原型链来实现的。<br>实现继承的方法主要有以下几种：</p><a id="more"></a><h2 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h2><p>将一个原型对象的实例赋值给另一个原型对象的原型，从而继承该原型对象的属性和方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>() &#123;</span><br><span class="line">  this.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getSuperValeu = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  <span class="built_in">return</span> this.property;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>() &#123;</span><br><span class="line">  this.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建 SuperType 实例，并将该实例赋值给 SubType.prototype</span><br><span class="line">SubType.prototype.getSubValvue = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  <span class="built_in">return</span> this.subproperty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance = new SubType();</span><br><span class="line">console.log(instance.getSuperValue());    // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>【注意事项】</p><ol><li>当子类需要覆盖父类的方法或者添加方法时，给原型添加的方法一定要放在替换原型的语句之后，<br> 否则子类实例调用该函数时，该函数将会被父类的原型方法给覆盖掉。</li><li>通过原型链实现继承时，不能使用对象字面量创建原型方法，否则将会重写原型链，导致继承失败。</li></ol><p><strong>优点：</strong></p><ul><li>每一个子类实例都可以继承父类函数的属性和方法以及父类函数原型链上的属性和方法</li></ul><p><strong>缺点：</strong></p><ul><li>包含引用类型值的原型属性会被所有实例共享，多个实例对引用类型的操作会被篡改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>() &#123;</span><br><span class="line">  this.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 继承 SuperType</span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line"></span><br><span class="line">var instance1 = new SubType();</span><br><span class="line">instance1.colors.push(<span class="string">'black'</span>);</span><br><span class="line">console.log(instance1.colors);    // <span class="string">'red, blue, green, black'</span></span><br><span class="line"></span><br><span class="line">var instance2 = new SubType();</span><br><span class="line">console.log(instance2.colors);    // <span class="string">'red, blue, green, black'</span></span><br></pre></td></tr></table></figure><h2 id="2、借用构造函数继承"><a href="#2、借用构造函数继承" class="headerlink" title="2、借用构造函数继承"></a>2、借用构造函数继承</h2><p>在子类构造函数中调用执行父类构造函数，并将this指针指向子类的构造函数的作用域,<br>使得子类的每个实例都会复制一份父类函数中的属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>() &#123;</span><br><span class="line">  this.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span> , <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>() &#123;</span><br><span class="line">  // 执父类构造函数，继承父类</span><br><span class="line">  SuperType.call(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance1 = new SubType();</span><br><span class="line">instance1.colors.push(<span class="string">'blck'</span>);</span><br><span class="line">console.log(instance1.colors);    // <span class="string">'red, blue, green, black'</span></span><br><span class="line"></span><br><span class="line">var instance2 = new SubType();</span><br><span class="line">console.log(instance2.colors);    // <span class="string">'red, blue, green'</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>在子类的构造函数中可以向父类函数传递参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> SuperType(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>() &#123;</span><br><span class="line">  // 继承 SuperType，同时传递参数</span><br><span class="line">  SuperType.call(this, <span class="string">'Nicholas'</span>);</span><br><span class="line"></span><br><span class="line">  // 实例属性</span><br><span class="line">  this.age = 29;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance = new SubType()</span><br><span class="line">console.log(instance.name);   // <span class="string">'Nicholas'</span></span><br><span class="line">console.log(instance.age);    // 29</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>只能继承父类的实例属性和方法，不能继承父类原型的属性和方法</li><li>每一个子类实例都有父类实例函数的副本，无法实现属性/方法复用</li></ul><h2 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h2><p>组合继承指的是组合原型链和借用构造函数技术的继承方法，使用原型链实现对原型属性和方法的继承，<br>通过借用构造函数来实现对实例属性的继承。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> SuperType(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SubType(name, age) &#123;</span><br><span class="line">  // 继承属性</span><br><span class="line">  // 第二次借用构造函数，调用 SuperType</span><br><span class="line">  SuperType.call(this, name);</span><br><span class="line"></span><br><span class="line">  this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 继承方法</span><br><span class="line">// 第一次构造原型链，调用 SuperType</span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line">// 重写 SubType.prototype 的 constructor 属性，指向自己的构造函数 SubType</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  console.log(this.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var instance1 = new SubType(<span class="string">'Nicholas'</span>, 29);</span><br><span class="line">instance1.colors.push(<span class="string">'black'</span>);</span><br><span class="line">console.log(instance1.colors);    // <span class="string">'red, blue, green, black'</span></span><br><span class="line">instance1.sayName();    // <span class="string">'Nicholas'</span></span><br><span class="line">instance1.sayAge();    // 29</span><br><span class="line"></span><br><span class="line">var instance12 = new SubType(<span class="string">'Greg'</span>, 27);</span><br><span class="line">console.log(instance2.colors);    // <span class="string">'red, blue, green'</span></span><br><span class="line">instance2.sayName();    // <span class="string">'Greg'</span></span><br><span class="line">instance2.sayAge();    // 27</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>子类的实例对象会分别两次调用 SuperType,在实例对象上拷贝了父类函数的属性，同时也在原型上创建了父类函数的属性，实例上的属性覆盖了原型对象上的同名属性。</li></ul><h2 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h2><p>利用空对象作为中介，将某个对象直接复制给空对象搞糟函数的原型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> object(obj) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125;</span><br><span class="line">  F.prototype = obj;</span><br><span class="line">  <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">object()对传入的对象执行了一次*浅复制*，将构造函数的原型直接指向传入的对象。</span><br><span class="line"></span><br><span class="line">var person = &#123;</span><br><span class="line">  name: <span class="string">'Nicholas'</span>,</span><br><span class="line">  friends: [<span class="string">'Shelby'</span>, <span class="string">'Court'</span>, <span class="string">'Van'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var anotherPerson = object(person);</span><br><span class="line">anotherPerson.name = <span class="string">'Greg'</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">'Rob'</span>);</span><br><span class="line"></span><br><span class="line">var yetAnotherPerson = object(person);</span><br><span class="line">yetAnotherPerson.name = <span class="string">'Linda'</span>;</span><br><span class="line">yetAnotherPerson.friends.push(<span class="string">'Barbie'</span>);</span><br><span class="line"></span><br><span class="line">console.log(person.friends);    // <span class="string">'Shelby, Court, Van, Rob, Barbie'</span></span><br></pre></td></tr></table></figure><p>另外，ES5 存在 Object.create() 的方法，能够代替上面的 object 方法。</p><h2 id="5、寄生式继承"><a href="#5、寄生式继承" class="headerlink" title="5、寄生式继承"></a>5、寄生式继承</h2><p>在原型式继承的基础上，增强对象，返回构造函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">funciton createAnother(original) &#123;</span><br><span class="line">  var <span class="built_in">clone</span> = object(orginal); // 通过调用 object() 函数创建一个新对象</span><br><span class="line">  clone.sayHi = <span class="function"><span class="title">function</span></span> () &#123; // 以某种方式来增强对象</span><br><span class="line">    console.log(<span class="string">'HI'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="built_in">clone</span>; // 返回这个对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过函数的作用增强新对象，即给新对象添加属性和方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">  name: <span class="string">'Nicholas'</span>,</span><br><span class="line">  friends: [<span class="string">'Shelby'</span>, <span class="string">'Court'</span>, <span class="string">'Van'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var anotherPerson = createAnother(person);</span><br><span class="line">anotherPerson.sayHi();    // <span class="string">'HI'</span></span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>引用属性被多个实例共享，存在多个实例篡改属性的可能</li><li>与构造函数模式类似，不能做到函数复用而降低效率</li></ul><h2 id="6、寄生组合式继承"><a href="#6、寄生组合式继承" class="headerlink" title="6、寄生组合式继承"></a>6、寄生组合式继承</h2><p>结合借用构造函数传递参数和寄生模实现继承</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> inheritPrototype(subType, superType) &#123;</span><br><span class="line">  var prototype = Object.create(superType.prototype); // 创建对象</span><br><span class="line">  prototype.constructor = subType;                    // 增强对象</span><br><span class="line">  subType.prototype = prototype;                      // 指定对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SuperType(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SubType(name, age) &#123;</span><br><span class="line">  SuperType.call(this, name);</span><br><span class="line"></span><br><span class="line">  this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  console.log(this.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>避免在实例的原型上创建不必要的、多余的属性，同时保持原型链不变</li></ul><p>寄生组合式继承式引用类型最理想的继承范式。</p><h2 id="7、圣杯模式继承"><a href="#7、圣杯模式继承" class="headerlink" title="7、圣杯模式继承"></a>7、圣杯模式继承</h2><p>圣杯模式：其原理依然遵循的是寄生组合式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 圣杯模式</span><br><span class="line"><span class="keyword">function</span> inherit(subType, superType) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125;;</span><br><span class="line">  F.prototype = superType.prototype;</span><br><span class="line">  subType.prototype = new F();</span><br><span class="line">  subType.prototype.constructor = superType;</span><br><span class="line">  subType.prototype.uber = superType.prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 高级圣杯</span><br><span class="line">// 通过闭包函数实现属性私有化的作用</span><br><span class="line">var inherit = (<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  var F = <span class="function"><span class="title">function</span></span> () &#123;&#125;;</span><br><span class="line">  <span class="built_in">return</span> <span class="keyword">function</span> (subType, superType) &#123;</span><br><span class="line">    // 定义私有属性</span><br><span class="line">    //var prop</span><br><span class="line">    F.prototype = superType.prototype;</span><br><span class="line">    subType.prototype = new F();</span><br><span class="line">    subType.prototype.constructor = superType;</span><br><span class="line">    subType.prototype.uber = superType.prototype;</span><br><span class="line">    // 获取私有属性</span><br><span class="line">    subType.prototype.getProp = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      // get prop</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8、混入方式继承多个对象"><a href="#8、混入方式继承多个对象" class="headerlink" title="8、混入方式继承多个对象"></a>8、混入方式继承多个对象</h2><p>通过 Object.assign 把其他原型构造函数拷贝到实例子类原型上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">MyClass</span></span>() &#123;</span><br><span class="line">  SuperClass.call(this);</span><br><span class="line">  OtherSuperClass.call(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 继承 SuperClass</span><br><span class="line">MyClass.prototype = Object.create(SuperClass.prototype);</span><br><span class="line">// 混合其他类</span><br><span class="line">Object.assign(MyClass.prototype, OtherSuperClass.prototype);</span><br><span class="line">// 重新指定 constructor</span><br><span class="line">MyClass.prototype.constructor = MyClass;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.myMethod = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  // <span class="keyword">do</span> something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、ES6-类继承-extends"><a href="#9、ES6-类继承-extends" class="headerlink" title="9、ES6 类继承 extends"></a>9、ES6 类继承 extends</h2><p>extends关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中constructor表示构造函数，一个类中只能有一个构造函数，有多个会报出SyntaxError错误,如果没有显式指定构造方法，则会添加默认的 constructor方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Rectangle &#123;</span><br><span class="line">  // constructor</span><br><span class="line">  constructor(height, width) &#123;</span><br><span class="line">    this.height = height;</span><br><span class="line">    this.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // Getter</span><br><span class="line">  get <span class="function"><span class="title">area</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.calcArea()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // Method</span><br><span class="line">  <span class="function"><span class="title">calcArea</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.height * this.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const rectangle = new Rectangle(10, 20);</span><br><span class="line">console.log(rectangle.area);</span><br><span class="line">// 输出 200</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">// 继承</span><br><span class="line">class Square extends Rectangle &#123;</span><br><span class="line"></span><br><span class="line">  constructor(length) &#123;</span><br><span class="line">    super(length, length);</span><br><span class="line">    // 如果子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</span><br><span class="line">    this.name = <span class="string">'Square'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get <span class="function"><span class="title">area</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.height * this.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const square = new Square(10);</span><br><span class="line">console.log(square.area);</span><br><span class="line">// 输出 100</span><br></pre></td></tr></table></figure><p>extends 继承的核心代码如下，其实现和上述的寄生组合式继承方式一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> _inherits(subType, superType) &#123;</span><br><span class="line"></span><br><span class="line">  // 创建对象，创建父类原型的一个副本</span><br><span class="line">  // 增强对象，弥补因重写原型而失去的默认的constructor 属性</span><br><span class="line">  // 指定对象，将新创建的对象赋值给子类的原型</span><br><span class="line">  subType.prototype = Object.create(superType &amp;&amp; superType.prototype, &#123;</span><br><span class="line">    constructor: &#123;</span><br><span class="line">      value: subType,</span><br><span class="line">      enumerable: <span class="literal">false</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (superType) &#123;</span><br><span class="line">    Object.setPrototypeOf</span><br><span class="line">      ? Object.setPrototypeOf(subType, superType)</span><br><span class="line">      : subType.__proto__ = superType;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5继承和ES6继承的区别</p><ul><li><p>ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.call(this)）.</p></li><li><p>ES6的继承有所不同，实质上是先创建父类的实例对象this，然后再用子类的构造函数修改this。因为子类没有自己的this对象，所以必须先调用父类的super()方法，否则新建实例报错。</p></li></ul><br><blockquote><p><a href="https://github.com/yygmind/blog/issues/7" target="_blank" rel="noopener">JavaScript常用八种继承方案</a></p><p>NicholasC.Zakas. JavaScript高级程序设计. JAVASCRIPT高级程序设计. 2012.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继承是 OOP 语言中一个比较重要的概念，继承可以使得子类具有父类的属性和方法或者重新定义、新追加属性和方法等，由于 Javascript 语言没有真正的对象类，所以其实现继承的方法相对而言会比较特殊，实现继承主要是依靠原型链来实现的。&lt;br&gt;实现继承的方法主要有以下几种：&lt;/p&gt;
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
