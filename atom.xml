<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凌风的博客</title>
  
  <subtitle>LinFun&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-30T08:48:45.272Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凌风</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript继承方法总结</title>
    <link href="http://yoursite.com/2019/09/30/javascript%E7%BB%A7%E6%89%BF%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/09/30/javascript继承方法总结/</id>
    <published>2019-09-30T08:21:21.000Z</published>
    <updated>2019-09-30T08:48:45.272Z</updated>
    
    <content type="html"><![CDATA[<p>继承是 OOP 语言中一个比较重要的概念，继承可以使得子类具有父类的属性和方法或者重新定义、新追加属性和方法等，由于 Javascript 语言没有真正的对象类，所以其实现继承的方法相对而言会比较特殊，实现继承主要是依靠原型链来实现的。<br>实现继承的方法主要有以下几种：</p><a id="more"></a><h2 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h2><p>将一个原型对象的实例赋值给另一个原型对象的原型，从而继承该原型对象的属性和方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>() &#123;</span><br><span class="line">  this.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getSuperValeu = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  <span class="built_in">return</span> this.property;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>() &#123;</span><br><span class="line">  this.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建 SuperType 实例，并将该实例赋值给 SubType.prototype</span><br><span class="line">SubType.prototype.getSubValvue = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  <span class="built_in">return</span> this.subproperty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance = new SubType();</span><br><span class="line">console.log(instance.getSuperValue());    // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>【注意事项】</p><ol><li>当子类需要覆盖父类的方法或者添加方法时，给原型添加的方法一定要放在替换原型的语句之后，<br> 否则子类实例调用该函数时，该函数将会被父类的原型方法给覆盖掉。</li><li>通过原型链实现继承时，不能使用对象字面量创建原型方法，否则将会重写原型链，导致继承失败。</li></ol><p><strong>优点：</strong></p><ul><li>每一个子类实例都可以继承父类函数的属性和方法以及父类函数原型链上的属性和方法</li></ul><p><strong>缺点：</strong></p><ul><li>包含引用类型值的原型属性会被所有实例共享，多个实例对引用类型的操作会被篡改</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>() &#123;</span><br><span class="line">  this.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 继承 SuperType</span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line"></span><br><span class="line">var instance1 = new SubType();</span><br><span class="line">instance1.colors.push(<span class="string">'black'</span>);</span><br><span class="line">console.log(instance1.colors);    // <span class="string">'red, blue, green, black'</span></span><br><span class="line"></span><br><span class="line">var instance2 = new SubType();</span><br><span class="line">console.log(instance2.colors);    // <span class="string">'red, blue, green, black'</span></span><br></pre></td></tr></table></figure><h2 id="2、借用构造函数继承"><a href="#2、借用构造函数继承" class="headerlink" title="2、借用构造函数继承"></a>2、借用构造函数继承</h2><p>在子类构造函数中调用执行父类构造函数，并将this指针指向子类的构造函数的作用域,<br>使得子类的每个实例都会复制一份父类函数中的属性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SuperType</span></span>() &#123;</span><br><span class="line">  this.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span> , <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>() &#123;</span><br><span class="line">  // 执父类构造函数，继承父类</span><br><span class="line">  SuperType.call(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance1 = new SubType();</span><br><span class="line">instance1.colors.push(<span class="string">'blck'</span>);</span><br><span class="line">console.log(instance1.colors);    // <span class="string">'red, blue, green, black'</span></span><br><span class="line"></span><br><span class="line">var instance2 = new SubType();</span><br><span class="line">console.log(instance2.colors);    // <span class="string">'red, blue, green'</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>在子类的构造函数中可以向父类函数传递参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> SuperType(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">SubType</span></span>() &#123;</span><br><span class="line">  // 继承 SuperType，同时传递参数</span><br><span class="line">  SuperType.call(this, <span class="string">'Nicholas'</span>);</span><br><span class="line"></span><br><span class="line">  // 实例属性</span><br><span class="line">  this.age = 29;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var instance = new SubType()</span><br><span class="line">console.log(instance.name);   // <span class="string">'Nicholas'</span></span><br><span class="line">console.log(instance.age);    // 29</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>只能继承父类的实例属性和方法，不能继承父类原型的属性和方法</li><li>每一个子类实例都有父类实例函数的副本，无法实现属性/方法复用</li></ul><h2 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h2><p>组合继承指的是组合原型链和借用构造函数技术的继承方法，使用原型链实现对原型属性和方法的继承，<br>通过借用构造函数来实现对实例属性的继承。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> SuperType(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SubType(name, age) &#123;</span><br><span class="line">  // 继承属性</span><br><span class="line">  // 第二次借用构造函数，调用 SuperType</span><br><span class="line">  SuperType.call(this, name);</span><br><span class="line"></span><br><span class="line">  this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 继承方法</span><br><span class="line">// 第一次构造原型链，调用 SuperType</span><br><span class="line">SubType.prototype = new SuperType();</span><br><span class="line">// 重写 SubType.prototype 的 constructor 属性，指向自己的构造函数 SubType</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  console.log(this.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var instance1 = new SubType(<span class="string">'Nicholas'</span>, 29);</span><br><span class="line">instance1.colors.push(<span class="string">'black'</span>);</span><br><span class="line">console.log(instance1.colors);    // <span class="string">'red, blue, green, black'</span></span><br><span class="line">instance1.sayName();    // <span class="string">'Nicholas'</span></span><br><span class="line">instance1.sayAge();    // 29</span><br><span class="line"></span><br><span class="line">var instance12 = new SubType(<span class="string">'Greg'</span>, 27);</span><br><span class="line">console.log(instance2.colors);    // <span class="string">'red, blue, green'</span></span><br><span class="line">instance2.sayName();    // <span class="string">'Greg'</span></span><br><span class="line">instance2.sayAge();    // 27</span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>子类的实例对象会分别两次调用 SuperType,在实例对象上拷贝了父类函数的属性，同时也在原型上创建了父类函数的属性，实例上的属性覆盖了原型对象上的同名属性。</li></ul><h2 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h2><p>利用空对象作为中介，将某个对象直接复制给空对象搞糟函数的原型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> object(obj) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125;</span><br><span class="line">  F.prototype = obj;</span><br><span class="line">  <span class="built_in">return</span> new F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">object()对传入的对象执行了一次*浅复制*，将构造函数的原型直接指向传入的对象。</span><br><span class="line"></span><br><span class="line">var person = &#123;</span><br><span class="line">  name: <span class="string">'Nicholas'</span>,</span><br><span class="line">  friends: [<span class="string">'Shelby'</span>, <span class="string">'Court'</span>, <span class="string">'Van'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var anotherPerson = object(person);</span><br><span class="line">anotherPerson.name = <span class="string">'Greg'</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">'Rob'</span>);</span><br><span class="line"></span><br><span class="line">var yetAnotherPerson = object(person);</span><br><span class="line">yetAnotherPerson.name = <span class="string">'Linda'</span>;</span><br><span class="line">yetAnotherPerson.friends.push(<span class="string">'Barbie'</span>);</span><br><span class="line"></span><br><span class="line">console.log(person.friends);    // <span class="string">'Shelby, Court, Van, Rob, Barbie'</span></span><br></pre></td></tr></table></figure><p>另外，ES5 存在 Object.create() 的方法，能够代替上面的 object 方法。</p><h2 id="5、寄生式继承"><a href="#5、寄生式继承" class="headerlink" title="5、寄生式继承"></a>5、寄生式继承</h2><p>在原型式继承的基础上，增强对象，返回构造函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">funciton createAnother(original) &#123;</span><br><span class="line">  var <span class="built_in">clone</span> = object(orginal); // 通过调用 object() 函数创建一个新对象</span><br><span class="line">  clone.sayHi = <span class="function"><span class="title">function</span></span> () &#123; // 以某种方式来增强对象</span><br><span class="line">    console.log(<span class="string">'HI'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="built_in">clone</span>; // 返回这个对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过函数的作用增强新对象，即给新对象添加属性和方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">  name: <span class="string">'Nicholas'</span>,</span><br><span class="line">  friends: [<span class="string">'Shelby'</span>, <span class="string">'Court'</span>, <span class="string">'Van'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var anotherPerson = createAnother(person);</span><br><span class="line">anotherPerson.sayHi();    // <span class="string">'HI'</span></span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>引用属性被多个实例共享，存在多个实例篡改属性的可能</li><li>与构造函数模式类似，不能做到函数复用而降低效率</li></ul><h2 id="6、寄生组合式继承"><a href="#6、寄生组合式继承" class="headerlink" title="6、寄生组合式继承"></a>6、寄生组合式继承</h2><p>结合借用构造函数传递参数和寄生模实现继承</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> inheritPrototype(subType, superType) &#123;</span><br><span class="line">  var prototype = Object.create(superType.prototype); // 创建对象</span><br><span class="line">  prototype.constructor = subType;                    // 增强对象</span><br><span class="line">  subType.prototype = prototype;                      // 指定对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SuperType(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  console.log(this.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> SubType(name, age) &#123;</span><br><span class="line">  SuperType.call(this, name);</span><br><span class="line"></span><br><span class="line">  this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  console.log(this.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li>避免在实例的原型上创建不必要的、多余的属性，同时保持原型链不变</li></ul><p>寄生组合式继承式引用类型最理想的继承范式。</p><h2 id="7、圣杯模式继承"><a href="#7、圣杯模式继承" class="headerlink" title="7、圣杯模式继承"></a>7、圣杯模式继承</h2><p>圣杯模式：其原理依然遵循的是寄生组合式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 圣杯模式</span><br><span class="line"><span class="keyword">function</span> inherit(subType, superType) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">F</span></span>() &#123;&#125;;</span><br><span class="line">  F.prototype = superType.prototype;</span><br><span class="line">  subType.prototype = new F();</span><br><span class="line">  subType.prototype.constructor = superType;</span><br><span class="line">  subType.prototype.uber = superType.prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 高级圣杯</span><br><span class="line">// 通过闭包函数实现属性私有化的作用</span><br><span class="line">var inherit = (<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  var F = <span class="function"><span class="title">function</span></span> () &#123;&#125;;</span><br><span class="line">  <span class="built_in">return</span> <span class="keyword">function</span> (subType, superType) &#123;</span><br><span class="line">    // 定义私有属性</span><br><span class="line">    //var prop</span><br><span class="line">    F.prototype = superType.prototype;</span><br><span class="line">    subType.prototype = new F();</span><br><span class="line">    subType.prototype.constructor = superType;</span><br><span class="line">    subType.prototype.uber = superType.prototype;</span><br><span class="line">    // 获取私有属性</span><br><span class="line">    subType.prototype.getProp = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      // get prop</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="8、混入方式继承多个对象"><a href="#8、混入方式继承多个对象" class="headerlink" title="8、混入方式继承多个对象"></a>8、混入方式继承多个对象</h2><p>通过 Object.assign 把其他原型构造函数拷贝到实例子类原型上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">MyClass</span></span>() &#123;</span><br><span class="line">  SuperClass.call(this);</span><br><span class="line">  OtherSuperClass.call(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 继承 SuperClass</span><br><span class="line">MyClass.prototype = Object.create(SuperClass.prototype);</span><br><span class="line">// 混合其他类</span><br><span class="line">Object.assign(MyClass.prototype, OtherSuperClass.prototype);</span><br><span class="line">// 重新指定 constructor</span><br><span class="line">MyClass.prototype.constructor = MyClass;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.myMethod = <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">  // <span class="keyword">do</span> something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、ES6-类继承-extends"><a href="#9、ES6-类继承-extends" class="headerlink" title="9、ES6 类继承 extends"></a>9、ES6 类继承 extends</h2><p>extends关键字主要用于类声明或者类表达式中，以创建一个类，该类是另一个类的子类。其中constructor表示构造函数，一个类中只能有一个构造函数，有多个会报出SyntaxError错误,如果没有显式指定构造方法，则会添加默认的 constructor方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Rectangle &#123;</span><br><span class="line">  // constructor</span><br><span class="line">  constructor(height, width) &#123;</span><br><span class="line">    this.height = height;</span><br><span class="line">    this.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // Getter</span><br><span class="line">  get <span class="function"><span class="title">area</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.calcArea()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // Method</span><br><span class="line">  <span class="function"><span class="title">calcArea</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.height * this.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const rectangle = new Rectangle(10, 20);</span><br><span class="line">console.log(rectangle.area);</span><br><span class="line">// 输出 200</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">// 继承</span><br><span class="line">class Square extends Rectangle &#123;</span><br><span class="line"></span><br><span class="line">  constructor(length) &#123;</span><br><span class="line">    super(length, length);</span><br><span class="line">    // 如果子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</span><br><span class="line">    this.name = <span class="string">'Square'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get <span class="function"><span class="title">area</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> this.height * this.width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const square = new Square(10);</span><br><span class="line">console.log(square.area);</span><br><span class="line">// 输出 100</span><br></pre></td></tr></table></figure><p>extends 继承的核心代码如下，其实现和上述的寄生组合式继承方式一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> _inherits(subType, superType) &#123;</span><br><span class="line"></span><br><span class="line">  // 创建对象，创建父类原型的一个副本</span><br><span class="line">  // 增强对象，弥补因重写原型而失去的默认的constructor 属性</span><br><span class="line">  // 指定对象，将新创建的对象赋值给子类的原型</span><br><span class="line">  subType.prototype = Object.create(superType &amp;&amp; superType.prototype, &#123;</span><br><span class="line">    constructor: &#123;</span><br><span class="line">      value: subType,</span><br><span class="line">      enumerable: <span class="literal">false</span>,</span><br><span class="line">      writable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (superType) &#123;</span><br><span class="line">    Object.setPrototypeOf</span><br><span class="line">      ? Object.setPrototypeOf(subType, superType)</span><br><span class="line">      : subType.__proto__ = superType;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5继承和ES6继承的区别</p><ul><li><p>ES5的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到this上（Parent.call(this)）.</p></li><li><p>ES6的继承有所不同，实质上是先创建父类的实例对象this，然后再用子类的构造函数修改this。因为子类没有自己的this对象，所以必须先调用父类的super()方法，否则新建实例报错。</p></li></ul><br><blockquote><p><a href="https://github.com/yygmind/blog/issues/7" target="_blank" rel="noopener">JavaScript常用八种继承方案</a></p><p>NicholasC.Zakas. JavaScript高级程序设计. JAVASCRIPT高级程序设计. 2012.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继承是 OOP 语言中一个比较重要的概念，继承可以使得子类具有父类的属性和方法或者重新定义、新追加属性和方法等，由于 Javascript 语言没有真正的对象类，所以其实现继承的方法相对而言会比较特殊，实现继承主要是依靠原型链来实现的。&lt;br&gt;实现继承的方法主要有以下几种：&lt;/p&gt;
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
